
ISO-I.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023f8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080025a4  080025a4  000125a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025bc  080025bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080025bc  080025bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025c4  080025c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c4  080025c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025c8  080025c8  000125c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000004c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004d0  200004d0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a183  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d04  00000000  00000000  0002a202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a88  00000000  00000000  0002bf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000080b  00000000  00000000  0002c990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022ad4  00000000  00000000  0002d19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bbb4  00000000  00000000  0004fc6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d41a3  00000000  00000000  0005b823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a90  00000000  00000000  0012f9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00132458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800258c 	.word	0x0800258c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800258c 	.word	0x0800258c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08c      	sub	sp, #48	; 0x30
 80004ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 031c 	add.w	r3, r7, #28
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
 8000502:	4b84      	ldr	r3, [pc, #528]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a83      	ldr	r2, [pc, #524]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b81      	ldr	r3, [pc, #516]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	61bb      	str	r3, [r7, #24]
 8000518:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	4b7d      	ldr	r3, [pc, #500]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a7c      	ldr	r2, [pc, #496]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b7a      	ldr	r3, [pc, #488]	; (8000714 <MX_GPIO_Init+0x22c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
 800053a:	4b76      	ldr	r3, [pc, #472]	; (8000714 <MX_GPIO_Init+0x22c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a75      	ldr	r2, [pc, #468]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b73      	ldr	r3, [pc, #460]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	4b6f      	ldr	r3, [pc, #444]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a6e      	ldr	r2, [pc, #440]	; (8000714 <MX_GPIO_Init+0x22c>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b6c      	ldr	r3, [pc, #432]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	4b68      	ldr	r3, [pc, #416]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a67      	ldr	r2, [pc, #412]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b65      	ldr	r3, [pc, #404]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b61      	ldr	r3, [pc, #388]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a60      	ldr	r2, [pc, #384]	; (8000714 <MX_GPIO_Init+0x22c>)
 8000594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b5e      	ldr	r3, [pc, #376]	; (8000714 <MX_GPIO_Init+0x22c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f244 0181 	movw	r1, #16513	; 0x4081
 80005ac:	485a      	ldr	r0, [pc, #360]	; (8000718 <MX_GPIO_Init+0x230>)
 80005ae:	f000 fe05 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2140      	movs	r1, #64	; 0x40
 80005b6:	4859      	ldr	r0, [pc, #356]	; (800071c <MX_GPIO_Init+0x234>)
 80005b8:	f000 fe00 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	4619      	mov	r1, r3
 80005d2:	4853      	ldr	r0, [pc, #332]	; (8000720 <MX_GPIO_Init+0x238>)
 80005d4:	f000 fc46 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80005d8:	2332      	movs	r3, #50	; 0x32
 80005da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005dc:	2302      	movs	r3, #2
 80005de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e4:	2303      	movs	r3, #3
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005e8:	230b      	movs	r3, #11
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	4619      	mov	r1, r3
 80005f2:	484b      	ldr	r0, [pc, #300]	; (8000720 <MX_GPIO_Init+0x238>)
 80005f4:	f000 fc36 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80005f8:	2386      	movs	r3, #134	; 0x86
 80005fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000604:	2303      	movs	r3, #3
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000608:	230b      	movs	r3, #11
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4619      	mov	r1, r3
 8000612:	4844      	ldr	r0, [pc, #272]	; (8000724 <MX_GPIO_Init+0x23c>)
 8000614:	f000 fc26 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000618:	f244 0381 	movw	r3, #16513	; 0x4081
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4839      	ldr	r0, [pc, #228]	; (8000718 <MX_GPIO_Init+0x230>)
 8000632:	f000 fc17 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000648:	230b      	movs	r3, #11
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4619      	mov	r1, r3
 8000652:	4831      	ldr	r0, [pc, #196]	; (8000718 <MX_GPIO_Init+0x230>)
 8000654:	f000 fc06 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000658:	f44f 7340 	mov.w	r3, #768	; 0x300
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800066a:	2307      	movs	r3, #7
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4619      	mov	r1, r3
 8000674:	482c      	ldr	r0, [pc, #176]	; (8000728 <MX_GPIO_Init+0x240>)
 8000676:	f000 fbf5 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800067a:	2340      	movs	r3, #64	; 0x40
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <MX_GPIO_Init+0x234>)
 8000692:	f000 fbe7 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	481c      	ldr	r0, [pc, #112]	; (800071c <MX_GPIO_Init+0x234>)
 80006aa:	f000 fbdb 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80006ae:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006c0:	230a      	movs	r3, #10
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4816      	ldr	r0, [pc, #88]	; (8000724 <MX_GPIO_Init+0x23c>)
 80006cc:	f000 fbca 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80006d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	480f      	ldr	r0, [pc, #60]	; (8000724 <MX_GPIO_Init+0x23c>)
 80006e6:	f000 fbbd 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006fc:	230b      	movs	r3, #11
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_GPIO_Init+0x234>)
 8000708:	f000 fbac 	bl	8000e64 <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3730      	adds	r7, #48	; 0x30
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40020400 	.word	0x40020400
 800071c:	40021800 	.word	0x40021800
 8000720:	40020800 	.word	0x40020800
 8000724:	40020000 	.word	0x40020000
 8000728:	40020c00 	.word	0x40020c00

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fa73 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f84d 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f7ff fed5 	bl	80004e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  osTaskCreate(&osTask1, task1, PRIORITY_1);
 800073e:	2201      	movs	r2, #1
 8000740:	491d      	ldr	r1, [pc, #116]	; (80007b8 <main+0x8c>)
 8000742:	481e      	ldr	r0, [pc, #120]	; (80007bc <main+0x90>)
 8000744:	f001 fd96 	bl	8002274 <osTaskCreate>
  osTaskCreate(&osTask2, task2, PRIORITY_0);    /* GPIO Ports Clock Enable */
 8000748:	2200      	movs	r2, #0
 800074a:	491d      	ldr	r1, [pc, #116]	; (80007c0 <main+0x94>)
 800074c:	481d      	ldr	r0, [pc, #116]	; (80007c4 <main+0x98>)
 800074e:	f001 fd91 	bl	8002274 <osTaskCreate>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <main+0x9c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <main+0x9c>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <main+0x9c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <main+0x9c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <main+0x9c>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <main+0x9c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <main+0x9c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <main+0x9c>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <main+0x9c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  osTaskCreate(&osTask3, task3,PRIORITY_2);
 80007a6:	2202      	movs	r2, #2
 80007a8:	4908      	ldr	r1, [pc, #32]	; (80007cc <main+0xa0>)
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <main+0xa4>)
 80007ac:	f001 fd62 	bl	8002274 <osTaskCreate>

  osStart();
 80007b0:	f001 fd98 	bl	80022e4 <osStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      __WFI();
 80007b4:	bf30      	wfi
 80007b6:	e7fd      	b.n	80007b4 <main+0x88>
 80007b8:	080008b5 	.word	0x080008b5
 80007bc:	20000028 	.word	0x20000028
 80007c0:	080008c7 	.word	0x080008c7
 80007c4:	20000134 	.word	0x20000134
 80007c8:	40023800 	.word	0x40023800
 80007cc:	080008d9 	.word	0x080008d9
 80007d0:	20000240 	.word	0x20000240

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2230      	movs	r2, #48	; 0x30
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fea6 	bl	8002534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <SystemClock_Config+0xd8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <SystemClock_Config+0xd8>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <SystemClock_Config+0xd8>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <SystemClock_Config+0xdc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a24      	ldr	r2, [pc, #144]	; (80008b0 <SystemClock_Config+0xdc>)
 800081e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <SystemClock_Config+0xdc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000834:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000848:	23b4      	movs	r3, #180	; 0xb4
 800084a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000850:	2307      	movs	r3, #7
 8000852:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fd19 	bl	8001290 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000864:	f000 f854 	bl	8000910 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000868:	f000 fcc2 	bl	80011f0 <HAL_PWREx_EnableOverDrive>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000872:	f000 f84d 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2302      	movs	r3, #2
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000882:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000886:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2105      	movs	r1, #5
 8000894:	4618      	mov	r0, r3
 8000896:	f000 ff73 	bl	8001780 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008a0:	f000 f836 	bl	8000910 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	; 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <task1>:

/* USER CODE BEGIN 4 */
static void task1(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
    uint32_t i = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]

    while(1)
    {
        i++;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3301      	adds	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	e7fb      	b.n	80008be <task1+0xa>

080008c6 <task2>:
    }
}

static void task2(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
    uint32_t j = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]

    while(1)
    {
        j++;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3301      	adds	r3, #1
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	e7fb      	b.n	80008d0 <task2+0xa>

080008d8 <task3>:
    }
}

static void task3(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
    uint32_t k = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]

    while(1)
    {
        k++;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3301      	adds	r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	e7fb      	b.n	80008e2 <task3+0xa>
	...

080008ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fe:	f000 f9af 	bl	8000c60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40010000 	.word	0x40010000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	; 0x30
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <HAL_InitTick+0xd4>)
 8000982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000984:	4a2e      	ldr	r2, [pc, #184]	; (8000a40 <HAL_InitTick+0xd4>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	6453      	str	r3, [r2, #68]	; 0x44
 800098c:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <HAL_InitTick+0xd4>)
 800098e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000998:	f107 020c 	add.w	r2, r7, #12
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 f8f8 	bl	8001b98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009a8:	f001 f8e2 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 80009ac:	4603      	mov	r3, r0
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b4:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <HAL_InitTick+0xd8>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	0c9b      	lsrs	r3, r3, #18
 80009bc:	3b01      	subs	r3, #1
 80009be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <HAL_InitTick+0xdc>)
 80009c2:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <HAL_InitTick+0xe0>)
 80009c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <HAL_InitTick+0xdc>)
 80009c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009ce:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <HAL_InitTick+0xdc>)
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <HAL_InitTick+0xdc>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <HAL_InitTick+0xdc>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <HAL_InitTick+0xdc>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009e6:	4818      	ldr	r0, [pc, #96]	; (8000a48 <HAL_InitTick+0xdc>)
 80009e8:	f001 f908 	bl	8001bfc <HAL_TIM_Base_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d11b      	bne.n	8000a32 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009fa:	4813      	ldr	r0, [pc, #76]	; (8000a48 <HAL_InitTick+0xdc>)
 80009fc:	f001 f958 	bl	8001cb0 <HAL_TIM_Base_Start_IT>
 8000a00:	4603      	mov	r3, r0
 8000a02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d111      	bne.n	8000a32 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a0e:	2019      	movs	r0, #25
 8000a10:	f000 fa1a 	bl	8000e48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b0f      	cmp	r3, #15
 8000a18:	d808      	bhi.n	8000a2c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	2019      	movs	r0, #25
 8000a20:	f000 f9f6 	bl	8000e10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_InitTick+0xe4>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	e002      	b.n	8000a32 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	431bde83 	.word	0x431bde83
 8000a48:	2000034c 	.word	0x2000034c
 8000a4c:	40010000 	.word	0x40010000
 8000a50:	20000004 	.word	0x20000004

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a96:	f001 f97b 	bl	8001d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000034c 	.word	0x2000034c

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b087      	sub	sp, #28
 8000acc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	2302      	movs	r3, #2
 8000ae0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ae2:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <SystemCoreClockUpdate+0xec>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	f003 030c 	and.w	r3, r3, #12
 8000aea:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	d011      	beq.n	8000b16 <SystemCoreClockUpdate+0x4e>
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	2b08      	cmp	r3, #8
 8000af6:	d844      	bhi.n	8000b82 <SystemCoreClockUpdate+0xba>
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <SystemCoreClockUpdate+0x3e>
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	2b04      	cmp	r3, #4
 8000b02:	d004      	beq.n	8000b0e <SystemCoreClockUpdate+0x46>
 8000b04:	e03d      	b.n	8000b82 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000b06:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <SystemCoreClockUpdate+0xf0>)
 8000b08:	4a2c      	ldr	r2, [pc, #176]	; (8000bbc <SystemCoreClockUpdate+0xf4>)
 8000b0a:	601a      	str	r2, [r3, #0]
      break;
 8000b0c:	e03d      	b.n	8000b8a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <SystemCoreClockUpdate+0xf0>)
 8000b10:	4a2b      	ldr	r2, [pc, #172]	; (8000bc0 <SystemCoreClockUpdate+0xf8>)
 8000b12:	601a      	str	r2, [r3, #0]
      break;
 8000b14:	e039      	b.n	8000b8a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000b16:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <SystemCoreClockUpdate+0xec>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	0d9b      	lsrs	r3, r3, #22
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <SystemCoreClockUpdate+0xec>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b2a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00c      	beq.n	8000b4c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b32:	4a23      	ldr	r2, [pc, #140]	; (8000bc0 <SystemCoreClockUpdate+0xf8>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4a1e      	ldr	r2, [pc, #120]	; (8000bb4 <SystemCoreClockUpdate+0xec>)
 8000b3c:	6852      	ldr	r2, [r2, #4]
 8000b3e:	0992      	lsrs	r2, r2, #6
 8000b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b44:	fb02 f303 	mul.w	r3, r2, r3
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e00b      	b.n	8000b64 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <SystemCoreClockUpdate+0xf4>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b54:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <SystemCoreClockUpdate+0xec>)
 8000b56:	6852      	ldr	r2, [r2, #4]
 8000b58:	0992      	lsrs	r2, r2, #6
 8000b5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b5e:	fb02 f303 	mul.w	r3, r2, r3
 8000b62:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <SystemCoreClockUpdate+0xec>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	0c1b      	lsrs	r3, r3, #16
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	3301      	adds	r3, #1
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <SystemCoreClockUpdate+0xf0>)
 8000b7e:	6013      	str	r3, [r2, #0]
      break;
 8000b80:	e003      	b.n	8000b8a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <SystemCoreClockUpdate+0xf0>)
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <SystemCoreClockUpdate+0xf4>)
 8000b86:	601a      	str	r2, [r3, #0]
      break;
 8000b88:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <SystemCoreClockUpdate+0xec>)
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	091b      	lsrs	r3, r3, #4
 8000b90:	f003 030f 	and.w	r3, r3, #15
 8000b94:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <SystemCoreClockUpdate+0xfc>)
 8000b96:	5cd3      	ldrb	r3, [r2, r3]
 8000b98:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <SystemCoreClockUpdate+0xf0>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <SystemCoreClockUpdate+0xf0>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	371c      	adds	r7, #28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	00f42400 	.word	0x00f42400
 8000bc0:	007a1200 	.word	0x007a1200
 8000bc4:	080025a4 	.word	0x080025a4

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bcc:	480d      	ldr	r0, [pc, #52]	; (8000c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bce:	490e      	ldr	r1, [pc, #56]	; (8000c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be4:	4c0b      	ldr	r4, [pc, #44]	; (8000c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf2:	f7ff ff57 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f001 fca5 	bl	8002544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fd97 	bl	800072c <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c00:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c0c:	080025cc 	.word	0x080025cc
  ldr r2, =_sbss
 8000c10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c14:	200004d0 	.word	0x200004d0

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <HAL_Init+0x40>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_Init+0x40>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_Init+0x40>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f8d8 	bl	8000dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	f7ff fe8e 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fe64 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000394 	.word	0x20000394

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000394 	.word	0x20000394

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0b      	blt.n	8000d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	4907      	ldr	r1, [pc, #28]	; (8000d3c <__NVIC_EnableIRQ+0x38>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff4c 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e22:	f7ff ff61 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	6978      	ldr	r0, [r7, #20]
 8000e2e:	f7ff ffb1 	bl	8000d94 <NVIC_EncodePriority>
 8000e32:	4602      	mov	r2, r0
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff80 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff54 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e177      	b.n	8001170 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 8166 	bne.w	800116a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d005      	beq.n	8000eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d130      	bne.n	8000f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d017      	beq.n	8000f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80c0 	beq.w	800116a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b66      	ldr	r3, [pc, #408]	; (8001188 <HAL_GPIO_Init+0x324>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a65      	ldr	r2, [pc, #404]	; (8001188 <HAL_GPIO_Init+0x324>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b63      	ldr	r3, [pc, #396]	; (8001188 <HAL_GPIO_Init+0x324>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001006:	4a61      	ldr	r2, [pc, #388]	; (800118c <HAL_GPIO_Init+0x328>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a58      	ldr	r2, [pc, #352]	; (8001190 <HAL_GPIO_Init+0x32c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d037      	beq.n	80010a2 <HAL_GPIO_Init+0x23e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a57      	ldr	r2, [pc, #348]	; (8001194 <HAL_GPIO_Init+0x330>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d031      	beq.n	800109e <HAL_GPIO_Init+0x23a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a56      	ldr	r2, [pc, #344]	; (8001198 <HAL_GPIO_Init+0x334>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d02b      	beq.n	800109a <HAL_GPIO_Init+0x236>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a55      	ldr	r2, [pc, #340]	; (800119c <HAL_GPIO_Init+0x338>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d025      	beq.n	8001096 <HAL_GPIO_Init+0x232>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a54      	ldr	r2, [pc, #336]	; (80011a0 <HAL_GPIO_Init+0x33c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01f      	beq.n	8001092 <HAL_GPIO_Init+0x22e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a53      	ldr	r2, [pc, #332]	; (80011a4 <HAL_GPIO_Init+0x340>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d019      	beq.n	800108e <HAL_GPIO_Init+0x22a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a52      	ldr	r2, [pc, #328]	; (80011a8 <HAL_GPIO_Init+0x344>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0x226>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a51      	ldr	r2, [pc, #324]	; (80011ac <HAL_GPIO_Init+0x348>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <HAL_GPIO_Init+0x222>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a50      	ldr	r2, [pc, #320]	; (80011b0 <HAL_GPIO_Init+0x34c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x21e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <HAL_GPIO_Init+0x350>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d101      	bne.n	800107e <HAL_GPIO_Init+0x21a>
 800107a:	2309      	movs	r3, #9
 800107c:	e012      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800107e:	230a      	movs	r3, #10
 8001080:	e010      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001082:	2308      	movs	r3, #8
 8001084:	e00e      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001086:	2307      	movs	r3, #7
 8001088:	e00c      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800108a:	2306      	movs	r3, #6
 800108c:	e00a      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800108e:	2305      	movs	r3, #5
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001092:	2304      	movs	r3, #4
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 80010a2:	2300      	movs	r3, #0
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b4:	4935      	ldr	r1, [pc, #212]	; (800118c <HAL_GPIO_Init+0x328>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c2:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <HAL_GPIO_Init+0x354>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e6:	4a34      	ldr	r2, [pc, #208]	; (80011b8 <HAL_GPIO_Init+0x354>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ec:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <HAL_GPIO_Init+0x354>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001110:	4a29      	ldr	r2, [pc, #164]	; (80011b8 <HAL_GPIO_Init+0x354>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001116:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_GPIO_Init+0x354>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113a:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <HAL_GPIO_Init+0x354>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <HAL_GPIO_Init+0x354>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <HAL_GPIO_Init+0x354>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	f67f ae84 	bls.w	8000e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40013800 	.word	0x40013800
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40021400 	.word	0x40021400
 80011a8:	40021800 	.word	0x40021800
 80011ac:	40021c00 	.word	0x40021c00
 80011b0:	40022000 	.word	0x40022000
 80011b4:	40022400 	.word	0x40022400
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <HAL_PWREx_EnableOverDrive+0x90>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <HAL_PWREx_EnableOverDrive+0x90>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_PWREx_EnableOverDrive+0x90>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_PWREx_EnableOverDrive+0x94>)
 8001218:	2201      	movs	r2, #1
 800121a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800121c:	f7ff fd34 	bl	8000c88 <HAL_GetTick>
 8001220:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001222:	e009      	b.n	8001238 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001224:	f7ff fd30 	bl	8000c88 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001232:	d901      	bls.n	8001238 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e01f      	b.n	8001278 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <HAL_PWREx_EnableOverDrive+0x98>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001244:	d1ee      	bne.n	8001224 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800124c:	f7ff fd1c 	bl	8000c88 <HAL_GetTick>
 8001250:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001252:	e009      	b.n	8001268 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001254:	f7ff fd18 	bl	8000c88 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001262:	d901      	bls.n	8001268 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e007      	b.n	8001278 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <HAL_PWREx_EnableOverDrive+0x98>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001274:	d1ee      	bne.n	8001254 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	420e0040 	.word	0x420e0040
 8001288:	40007000 	.word	0x40007000
 800128c:	420e0044 	.word	0x420e0044

08001290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e267      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d075      	beq.n	800139a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ae:	4b88      	ldr	r3, [pc, #544]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d00c      	beq.n	80012d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ba:	4b85      	ldr	r3, [pc, #532]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d112      	bne.n	80012ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c6:	4b82      	ldr	r3, [pc, #520]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012d2:	d10b      	bne.n	80012ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	4b7e      	ldr	r3, [pc, #504]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d05b      	beq.n	8001398 <HAL_RCC_OscConfig+0x108>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d157      	bne.n	8001398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e242      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f4:	d106      	bne.n	8001304 <HAL_RCC_OscConfig+0x74>
 80012f6:	4b76      	ldr	r3, [pc, #472]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a75      	ldr	r2, [pc, #468]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e01d      	b.n	8001340 <HAL_RCC_OscConfig+0xb0>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0x98>
 800130e:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a6f      	ldr	r2, [pc, #444]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b6d      	ldr	r3, [pc, #436]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a6c      	ldr	r2, [pc, #432]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0xb0>
 8001328:	4b69      	ldr	r3, [pc, #420]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a68      	ldr	r2, [pc, #416]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fc9e 	bl	8000c88 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fc9a 	bl	8000c88 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e207      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0xc0>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fc8a 	bl	8000c88 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fc86 	bl	8000c88 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1f3      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	4b51      	ldr	r3, [pc, #324]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0xe8>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d063      	beq.n	800146e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a6:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b2:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d11c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013be:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_RCC_OscConfig+0x152>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e1c7      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4937      	ldr	r1, [pc, #220]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	e03a      	b.n	800146e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d020      	beq.n	8001442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001400:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <HAL_RCC_OscConfig+0x244>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001406:	f7ff fc3f 	bl	8000c88 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff fc3b 	bl	8000c88 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e1a8      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4925      	ldr	r1, [pc, #148]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
 8001440:	e015      	b.n	800146e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_RCC_OscConfig+0x244>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fc1e 	bl	8000c88 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001450:	f7ff fc1a 	bl	8000c88 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e187      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d036      	beq.n	80014e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d016      	beq.n	80014b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_RCC_OscConfig+0x248>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001488:	f7ff fbfe 	bl	8000c88 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff fbfa 	bl	8000c88 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e167      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_RCC_OscConfig+0x240>)
 80014a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x200>
 80014ae:	e01b      	b.n	80014e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_RCC_OscConfig+0x248>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fbe7 	bl	8000c88 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	e00e      	b.n	80014dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014be:	f7ff fbe3 	bl	8000c88 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d907      	bls.n	80014dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e150      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
 80014d0:	40023800 	.word	0x40023800
 80014d4:	42470000 	.word	0x42470000
 80014d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014dc:	4b88      	ldr	r3, [pc, #544]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1ea      	bne.n	80014be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 8097 	beq.w	8001624 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fa:	4b81      	ldr	r3, [pc, #516]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10f      	bne.n	8001526 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b7d      	ldr	r3, [pc, #500]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a7c      	ldr	r2, [pc, #496]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b7a      	ldr	r3, [pc, #488]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001522:	2301      	movs	r3, #1
 8001524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001526:	4b77      	ldr	r3, [pc, #476]	; (8001704 <HAL_RCC_OscConfig+0x474>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d118      	bne.n	8001564 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001532:	4b74      	ldr	r3, [pc, #464]	; (8001704 <HAL_RCC_OscConfig+0x474>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a73      	ldr	r2, [pc, #460]	; (8001704 <HAL_RCC_OscConfig+0x474>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153e:	f7ff fba3 	bl	8000c88 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001546:	f7ff fb9f 	bl	8000c88 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e10c      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	4b6a      	ldr	r3, [pc, #424]	; (8001704 <HAL_RCC_OscConfig+0x474>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x2ea>
 800156c:	4b64      	ldr	r3, [pc, #400]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001570:	4a63      	ldr	r2, [pc, #396]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6713      	str	r3, [r2, #112]	; 0x70
 8001578:	e01c      	b.n	80015b4 <HAL_RCC_OscConfig+0x324>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b05      	cmp	r3, #5
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x30c>
 8001582:	4b5f      	ldr	r3, [pc, #380]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	4a5e      	ldr	r2, [pc, #376]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	6713      	str	r3, [r2, #112]	; 0x70
 800158e:	4b5c      	ldr	r3, [pc, #368]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001592:	4a5b      	ldr	r2, [pc, #364]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6713      	str	r3, [r2, #112]	; 0x70
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_OscConfig+0x324>
 800159c:	4b58      	ldr	r3, [pc, #352]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a57      	ldr	r2, [pc, #348]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	4b55      	ldr	r3, [pc, #340]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ac:	4a54      	ldr	r2, [pc, #336]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80015ae:	f023 0304 	bic.w	r3, r3, #4
 80015b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d015      	beq.n	80015e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fb64 	bl	8000c88 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c2:	e00a      	b.n	80015da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff fb60 	bl	8000c88 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e0cb      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015da:	4b49      	ldr	r3, [pc, #292]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0ee      	beq.n	80015c4 <HAL_RCC_OscConfig+0x334>
 80015e6:	e014      	b.n	8001612 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff fb4e 	bl	8000c88 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff fb4a 	bl	8000c88 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e0b5      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001606:	4b3e      	ldr	r3, [pc, #248]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ee      	bne.n	80015f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d105      	bne.n	8001624 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001618:	4b39      	ldr	r3, [pc, #228]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	4a38      	ldr	r2, [pc, #224]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 800161e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001622:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80a1 	beq.w	8001770 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800162e:	4b34      	ldr	r3, [pc, #208]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b08      	cmp	r3, #8
 8001638:	d05c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d141      	bne.n	80016c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <HAL_RCC_OscConfig+0x478>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fb1e 	bl	8000c88 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001650:	f7ff fb1a 	bl	8000c88 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e087      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69da      	ldr	r2, [r3, #28]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	019b      	lsls	r3, r3, #6
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	085b      	lsrs	r3, r3, #1
 8001686:	3b01      	subs	r3, #1
 8001688:	041b      	lsls	r3, r3, #16
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	061b      	lsls	r3, r3, #24
 8001692:	491b      	ldr	r1, [pc, #108]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x478>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff faf3 	bl	8000c88 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff faef 	bl	8000c88 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e05c      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x416>
 80016c4:	e054      	b.n	8001770 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_RCC_OscConfig+0x478>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fadc 	bl	8000c88 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff fad8 	bl	8000c88 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e045      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_RCC_OscConfig+0x470>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x444>
 80016f2:	e03d      	b.n	8001770 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e038      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000
 8001708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_RCC_OscConfig+0x4ec>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d028      	beq.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d121      	bne.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d11a      	bne.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800173c:	4013      	ands	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001744:	4293      	cmp	r3, r2
 8001746:	d111      	bne.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001752:	085b      	lsrs	r3, r3, #1
 8001754:	3b01      	subs	r3, #1
 8001756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d107      	bne.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800

08001780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0cc      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d90c      	bls.n	80017bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b8      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a58      	ldr	r2, [pc, #352]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a52      	ldr	r2, [pc, #328]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b50      	ldr	r3, [pc, #320]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	494d      	ldr	r1, [pc, #308]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d044      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d119      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e07f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d003      	beq.n	800183e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183a:	2b03      	cmp	r3, #3
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e06f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e067      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f023 0203 	bic.w	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4934      	ldr	r1, [pc, #208]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001870:	f7ff fa0a 	bl	8000c88 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	e00a      	b.n	800188e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001878:	f7ff fa06 	bl	8000c88 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e04f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	4b2b      	ldr	r3, [pc, #172]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 020c 	and.w	r2, r3, #12
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	429a      	cmp	r2, r3
 800189e:	d1eb      	bne.n	8001878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d20c      	bcs.n	80018c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e032      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4916      	ldr	r1, [pc, #88]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	490e      	ldr	r1, [pc, #56]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001906:	f000 f821 	bl	800194c <HAL_RCC_GetSysClockFreq>
 800190a:	4602      	mov	r2, r0
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	490a      	ldr	r1, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f820 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00
 800193c:	40023800 	.word	0x40023800
 8001940:	080025a4 	.word	0x080025a4
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001950:	b094      	sub	sp, #80	; 0x50
 8001952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	647b      	str	r3, [r7, #68]	; 0x44
 8001958:	2300      	movs	r3, #0
 800195a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800195c:	2300      	movs	r3, #0
 800195e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001964:	4b79      	ldr	r3, [pc, #484]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d00d      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x40>
 8001970:	2b08      	cmp	r3, #8
 8001972:	f200 80e1 	bhi.w	8001b38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x34>
 800197a:	2b04      	cmp	r3, #4
 800197c:	d003      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x3a>
 800197e:	e0db      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001982:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001984:	e0db      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001986:	4b73      	ldr	r3, [pc, #460]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001988:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800198a:	e0d8      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800198c:	4b6f      	ldr	r3, [pc, #444]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001996:	4b6d      	ldr	r3, [pc, #436]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d063      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a2:	4b6a      	ldr	r3, [pc, #424]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	099b      	lsrs	r3, r3, #6
 80019a8:	2200      	movs	r2, #0
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80019ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
 80019ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019be:	4622      	mov	r2, r4
 80019c0:	462b      	mov	r3, r5
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	0159      	lsls	r1, r3, #5
 80019cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d0:	0150      	lsls	r0, r2, #5
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4621      	mov	r1, r4
 80019d8:	1a51      	subs	r1, r2, r1
 80019da:	6139      	str	r1, [r7, #16]
 80019dc:	4629      	mov	r1, r5
 80019de:	eb63 0301 	sbc.w	r3, r3, r1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019f0:	4659      	mov	r1, fp
 80019f2:	018b      	lsls	r3, r1, #6
 80019f4:	4651      	mov	r1, sl
 80019f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019fa:	4651      	mov	r1, sl
 80019fc:	018a      	lsls	r2, r1, #6
 80019fe:	4651      	mov	r1, sl
 8001a00:	ebb2 0801 	subs.w	r8, r2, r1
 8001a04:	4659      	mov	r1, fp
 8001a06:	eb63 0901 	sbc.w	r9, r3, r1
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a1e:	4690      	mov	r8, r2
 8001a20:	4699      	mov	r9, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	eb18 0303 	adds.w	r3, r8, r3
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	eb49 0303 	adc.w	r3, r9, r3
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a3e:	4629      	mov	r1, r5
 8001a40:	024b      	lsls	r3, r1, #9
 8001a42:	4621      	mov	r1, r4
 8001a44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a48:	4621      	mov	r1, r4
 8001a4a:	024a      	lsls	r2, r1, #9
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a52:	2200      	movs	r2, #0
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a5c:	f7fe fbc6 	bl	80001ec <__aeabi_uldivmod>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4613      	mov	r3, r2
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a68:	e058      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	2200      	movs	r2, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	4611      	mov	r1, r2
 8001a76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a84:	4642      	mov	r2, r8
 8001a86:	464b      	mov	r3, r9
 8001a88:	f04f 0000 	mov.w	r0, #0
 8001a8c:	f04f 0100 	mov.w	r1, #0
 8001a90:	0159      	lsls	r1, r3, #5
 8001a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a96:	0150      	lsls	r0, r2, #5
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4641      	mov	r1, r8
 8001a9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aa2:	4649      	mov	r1, r9
 8001aa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ab4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001abc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ac0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	00eb      	lsls	r3, r5, #3
 8001ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ad2:	00e2      	lsls	r2, r4, #3
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	461d      	mov	r5, r3
 8001ad8:	4643      	mov	r3, r8
 8001ada:	18e3      	adds	r3, r4, r3
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	464b      	mov	r3, r9
 8001ae0:	eb45 0303 	adc.w	r3, r5, r3
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001af2:	4629      	mov	r1, r5
 8001af4:	028b      	lsls	r3, r1, #10
 8001af6:	4621      	mov	r1, r4
 8001af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001afc:	4621      	mov	r1, r4
 8001afe:	028a      	lsls	r2, r1, #10
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b06:	2200      	movs	r2, #0
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	61fa      	str	r2, [r7, #28]
 8001b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b10:	f7fe fb6c 	bl	80001ec <__aeabi_uldivmod>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4613      	mov	r3, r2
 8001b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	0c1b      	lsrs	r3, r3, #16
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	3301      	adds	r3, #1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b36:	e002      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3750      	adds	r7, #80	; 0x50
 8001b44:	46bd      	mov	sp, r7
 8001b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	00f42400 	.word	0x00f42400
 8001b54:	007a1200 	.word	0x007a1200

08001b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000000 	.word	0x20000000

08001b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b74:	f7ff fff0 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0b5b      	lsrs	r3, r3, #13
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4903      	ldr	r1, [pc, #12]	; (8001b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	080025b4 	.word	0x080025b4

08001b98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0203 	and.w	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	08db      	lsrs	r3, r3, #3
 8001bd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <HAL_RCC_GetClockConfig+0x60>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 020f 	and.w	r2, r3, #15
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	601a      	str	r2, [r3, #0]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e041      	b.n	8001c92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f839 	bl	8001c9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f000 f9d8 	bl	8001ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d001      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e04e      	b.n	8001d66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a23      	ldr	r2, [pc, #140]	; (8001d74 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d022      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf2:	d01d      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d018      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <HAL_TIM_Base_Start_IT+0xcc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00e      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d009      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d004      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x80>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d111      	bne.n	8001d54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d010      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d52:	e007      	b.n	8001d64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40010000 	.word	0x40010000
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40000800 	.word	0x40000800
 8001d80:	40000c00 	.word	0x40000c00
 8001d84:	40010400 	.word	0x40010400
 8001d88:	40014000 	.word	0x40014000
 8001d8c:	40001800 	.word	0x40001800

08001d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d122      	bne.n	8001dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d11b      	bne.n	8001dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0202 	mvn.w	r2, #2
 8001dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8ee 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8001dd8:	e005      	b.n	8001de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f8e0 	bl	8001fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f8f1 	bl	8001fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d122      	bne.n	8001e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d11b      	bne.n	8001e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0204 	mvn.w	r2, #4
 8001e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2202      	movs	r2, #2
 8001e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f8c4 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8001e2c:	e005      	b.n	8001e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8b6 	bl	8001fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f8c7 	bl	8001fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d122      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d11b      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0208 	mvn.w	r2, #8
 8001e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f89a 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8001e80:	e005      	b.n	8001e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f88c 	bl	8001fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f89d 	bl	8001fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b10      	cmp	r3, #16
 8001ea0:	d122      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	2b10      	cmp	r3, #16
 8001eae:	d11b      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0210 	mvn.w	r2, #16
 8001eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f870 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8001ed4:	e005      	b.n	8001ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f862 	bl	8001fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f873 	bl	8001fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d10e      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d107      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0201 	mvn.w	r2, #1
 8001f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe fcec 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1e:	2b80      	cmp	r3, #128	; 0x80
 8001f20:	d10e      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2c:	2b80      	cmp	r3, #128	; 0x80
 8001f2e:	d107      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f902 	bl	8002144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	d10e      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f58:	2b40      	cmp	r3, #64	; 0x40
 8001f5a:	d107      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f838 	bl	8001fdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	d10e      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d107      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0220 	mvn.w	r2, #32
 8001f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8cc 	bl	8002130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a40      	ldr	r2, [pc, #256]	; (8002104 <TIM_Base_SetConfig+0x114>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d013      	beq.n	8002030 <TIM_Base_SetConfig+0x40>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200e:	d00f      	beq.n	8002030 <TIM_Base_SetConfig+0x40>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a3d      	ldr	r2, [pc, #244]	; (8002108 <TIM_Base_SetConfig+0x118>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d00b      	beq.n	8002030 <TIM_Base_SetConfig+0x40>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a3c      	ldr	r2, [pc, #240]	; (800210c <TIM_Base_SetConfig+0x11c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d007      	beq.n	8002030 <TIM_Base_SetConfig+0x40>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3b      	ldr	r2, [pc, #236]	; (8002110 <TIM_Base_SetConfig+0x120>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d003      	beq.n	8002030 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3a      	ldr	r2, [pc, #232]	; (8002114 <TIM_Base_SetConfig+0x124>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d108      	bne.n	8002042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a2f      	ldr	r2, [pc, #188]	; (8002104 <TIM_Base_SetConfig+0x114>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d02b      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002050:	d027      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a2c      	ldr	r2, [pc, #176]	; (8002108 <TIM_Base_SetConfig+0x118>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d023      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a2b      	ldr	r2, [pc, #172]	; (800210c <TIM_Base_SetConfig+0x11c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01f      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a2a      	ldr	r2, [pc, #168]	; (8002110 <TIM_Base_SetConfig+0x120>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01b      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a29      	ldr	r2, [pc, #164]	; (8002114 <TIM_Base_SetConfig+0x124>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d017      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a28      	ldr	r2, [pc, #160]	; (8002118 <TIM_Base_SetConfig+0x128>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a27      	ldr	r2, [pc, #156]	; (800211c <TIM_Base_SetConfig+0x12c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00f      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a26      	ldr	r2, [pc, #152]	; (8002120 <TIM_Base_SetConfig+0x130>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00b      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a25      	ldr	r2, [pc, #148]	; (8002124 <TIM_Base_SetConfig+0x134>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a24      	ldr	r2, [pc, #144]	; (8002128 <TIM_Base_SetConfig+0x138>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d003      	beq.n	80020a2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a23      	ldr	r2, [pc, #140]	; (800212c <TIM_Base_SetConfig+0x13c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d108      	bne.n	80020b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <TIM_Base_SetConfig+0x114>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d003      	beq.n	80020e8 <TIM_Base_SetConfig+0xf8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a0c      	ldr	r2, [pc, #48]	; (8002114 <TIM_Base_SetConfig+0x124>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d103      	bne.n	80020f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	615a      	str	r2, [r3, #20]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40010000 	.word	0x40010000
 8002108:	40000400 	.word	0x40000400
 800210c:	40000800 	.word	0x40000800
 8002110:	40000c00 	.word	0x40000c00
 8002114:	40010400 	.word	0x40010400
 8002118:	40014000 	.word	0x40014000
 800211c:	40014400 	.word	0x40014400
 8002120:	40014800 	.word	0x40014800
 8002124:	40001800 	.word	0x40001800
 8002128:	40001c00 	.word	0x40001c00
 800212c:	40002000 	.word	0x40002000

08002130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <__NVIC_EnableIRQ>:
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0b      	blt.n	8002182 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4907      	ldr	r1, [pc, #28]	; (8002190 <__NVIC_EnableIRQ+0x38>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_DisableIRQ>:
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	db12      	blt.n	80021cc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	490a      	ldr	r1, [pc, #40]	; (80021d8 <__NVIC_DisableIRQ+0x44>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2001      	movs	r0, #1
 80021b6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ba:	3320      	adds	r3, #32
 80021bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021c0:	f3bf 8f4f 	dsb	sy
}
 80021c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021c6:	f3bf 8f6f 	isb	sy
}
 80021ca:	bf00      	nop
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000e100 	.word	0xe000e100

080021dc <__NVIC_SetPriority>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	; (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002240:	d301      	bcc.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <SysTick_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	210f      	movs	r1, #15
 8002250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002254:	f7ff ffc2 	bl	80021dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <SysTick_Config+0x40>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <SysTick_Config+0x40>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <osTaskCreate>:
static void initializeTask(osTaskObject* handler, void* callback, OsTaskPriorityNumber priority);  // adding prioriry
static void configureInterrupts(void);  //--AQUI--
/* ================= Public functions implementation ================ */

bool osTaskCreate(osTaskObject* handler, void* callback, OsTaskPriorityNumber priority)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	4613      	mov	r3, r2
 8002280:	71fb      	strb	r3, [r7, #7]
    if (osKernel.countTask >= MAX_NUMBER_TASK)
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <osTaskCreate+0x6c>)
 8002284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002288:	2b07      	cmp	r3, #7
 800228a:	d901      	bls.n	8002290 <osTaskCreate+0x1c>
    {
        return false;
 800228c:	2300      	movs	r3, #0
 800228e:	e023      	b.n	80022d8 <osTaskCreate+0x64>
    }
    // xPSR value with 24 bit on one (Thumb mode).
    // Pointer function of task.

    initializeTask(handler, callback,priority);
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	461a      	mov	r2, r3
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f8dc 	bl	8002454 <initializeTask>

    // Fill controls OS structure
    osKernel.listTask[osKernel.countTask] = handler;
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <osTaskCreate+0x6c>)
 800229e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022a2:	4619      	mov	r1, r3
 80022a4:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <osTaskCreate+0x6c>)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    osKernel.countTask++;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <osTaskCreate+0x6c>)
 80022ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022b2:	3301      	adds	r3, #1
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <osTaskCreate+0x6c>)
 80022b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    // Ask to avoid overflow memory when fill element vector
    if (osKernel.countTask < MAX_NUMBER_TASK)
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <osTaskCreate+0x6c>)
 80022be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022c2:	2b07      	cmp	r3, #7
 80022c4:	d807      	bhi.n	80022d6 <osTaskCreate+0x62>
    {
        osKernel.listTask[osKernel.countTask] = NULL;
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <osTaskCreate+0x6c>)
 80022c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022cc:	4619      	mov	r1, r3
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <osTaskCreate+0x6c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    }

    return true;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000398 	.word	0x20000398

080022e4 <osStart>:

void osStart(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	     * condition, we have to less priotity of NVIC. This math calculation showing take lowest
	     * priority possible.
	     * Activate and configure the time of Systick exception
	     *
	     */
	configureInterrupts();
 80022e8:	f000 f8e6 	bl	80024b8 <configureInterrupts>
	initIdleTask();
 80022ec:	f000 f816 	bl	800231c <initIdleTask>

    osKernel.running = false;
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <osStart+0x34>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    osKernel.currentTask = NULL;
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <osStart+0x34>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	621a      	str	r2, [r3, #32]
    osKernel.nextTask = NULL;
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <osStart+0x34>)
 8002300:	2200      	movs	r2, #0
 8002302:	625a      	str	r2, [r3, #36]	; 0x24


    NVIC_EnableIRQ(PendSV_IRQn);
 8002304:	f06f 0001 	mvn.w	r0, #1
 8002308:	f7ff ff26 	bl	8002158 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(SysTick_IRQn);
 800230c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002310:	f7ff ff22 	bl	8002158 <__NVIC_EnableIRQ>
}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000398 	.word	0x20000398

0800231c <initIdleTask>:

static void initIdleTask(void)  {
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
	idleTask.memoryStack[MAX_STACK_SIZE/4 - XPSR_REG_POSITION] = XPSR_VALUE;
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <initIdleTask+0x54>)
 8002322:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002326:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	idleTask.memoryStack[MAX_STACK_SIZE/4 - PC_REG_POSTION] = (uint32_t)osIdleTask;
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <initIdleTask+0x58>)
 800232c:	4b10      	ldr	r3, [pc, #64]	; (8002370 <initIdleTask+0x54>)
 800232e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	idleTask.memoryStack[MAX_STACK_SIZE/4 - LR_PREV_VALUE_POSTION] = EXEC_RETURN_VALUE;
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <initIdleTask+0x54>)
 8002334:	f06f 0206 	mvn.w	r2, #6
 8002338:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	idleTask.stackPointer = (uint32_t) (idleTask.memoryStack + MAX_STACK_SIZE/4 - SIZE_STACK_FRAME);
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <initIdleTask+0x5c>)
 800233e:	461a      	mov	r2, r3
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <initIdleTask+0x54>)
 8002342:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100


	idleTask.entryPoint = osIdleTask;
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <initIdleTask+0x54>)
 8002348:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <initIdleTask+0x58>)
 800234a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	idleTask.taskPriority = PRIORITY_4;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <initIdleTask+0x54>)
 8002350:	2204      	movs	r2, #4
 8002352:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	idleTask.taskId = 0xFF;
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <initIdleTask+0x54>)
 8002358:	22ff      	movs	r2, #255	; 0xff
 800235a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	idleTask.taskStatus = OS_TASK_READY;
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <initIdleTask+0x54>)
 8002360:	2200      	movs	r2, #0
 8002362:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	200003c4 	.word	0x200003c4
 8002374:	0800237d 	.word	0x0800237d
 8002378:	20000480 	.word	0x20000480

0800237c <osIdleTask>:
__attribute__((weak)) void osIdleTask(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
    while(1)
    {
    	__WFI();
 8002380:	bf30      	wfi
 8002382:	e7fd      	b.n	8002380 <osIdleTask+0x4>

08002384 <getNextContext>:
 * @param[in] currentStaskPointer Stack pointer of current task.
 *
 * @return Return stack pointer of new task to execute.
 */
static uint32_t getNextContext(uint32_t currentStaskPointer)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
     // Is the first time execute operating system? Yes, so will do task charged on next task.
    if (!osKernel.running)
 800238c:	4b17      	ldr	r3, [pc, #92]	; (80023ec <getNextContext+0x68>)
 800238e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002392:	f083 0301 	eor.w	r3, r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d009      	beq.n	80023b0 <getNextContext+0x2c>
    {
        osKernel.currentTask->taskStatus    = OS_TASK_RUNNING;
 800239c:	4b13      	ldr	r3, [pc, #76]	; (80023ec <getNextContext+0x68>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        osKernel.running                = true;
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <getNextContext+0x68>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80023ae:	e012      	b.n	80023d6 <getNextContext+0x52>
    }
    else
    {
        // Storage last stack pointer used on current task and change state to ready.
        osKernel.currentTask->stackPointer  = currentStaskPointer;
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <getNextContext+0x68>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        osKernel.currentTask->taskStatus        = OS_TASK_READY;
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <getNextContext+0x68>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

        // Switch address memory points on current task for next task and change state of task
        osKernel.currentTask            = osKernel.nextTask;
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <getNextContext+0x68>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	4a08      	ldr	r2, [pc, #32]	; (80023ec <getNextContext+0x68>)
 80023ca:	6213      	str	r3, [r2, #32]
        osKernel.currentTask->taskStatus    = OS_TASK_RUNNING;
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <getNextContext+0x68>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    }

    return osKernel.currentTask->stackPointer;
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <getNextContext+0x68>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000398 	.word	0x20000398

080023f0 <scheduler>:
 * @brief Get the task that must be run.
 *
 * @return Returns true if a new task to be executed.
 */
static void scheduler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
    uint8_t index = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	71fb      	strb	r3, [r7, #7]

    // Is the first time that operating system execute? Yes, so I start with Task1
    if (!osKernel.running) {
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <scheduler+0x60>)
 80023fc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002400:	f083 0301 	eor.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d004      	beq.n	8002414 <scheduler+0x24>
        osKernel.currentTask = osKernel.listTask[0];
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <scheduler+0x60>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <scheduler+0x60>)
 8002410:	6213      	str	r3, [r2, #32]
            index = 0;
        }

        osKernel.nextTask = osKernel.listTask[index];
    }
}
 8002412:	e016      	b.n	8002442 <scheduler+0x52>
        index = osKernel.currentTask->taskId + 1;
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <scheduler+0x60>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800241c:	3301      	adds	r3, #1
 800241e:	71fb      	strb	r3, [r7, #7]
        if (index >= MAX_NUMBER_TASK || NULL == osKernel.listTask[index])
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	2b07      	cmp	r3, #7
 8002424:	d805      	bhi.n	8002432 <scheduler+0x42>
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	4a09      	ldr	r2, [pc, #36]	; (8002450 <scheduler+0x60>)
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <scheduler+0x46>
            index = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	71fb      	strb	r3, [r7, #7]
        osKernel.nextTask = osKernel.listTask[index];
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	4a05      	ldr	r2, [pc, #20]	; (8002450 <scheduler+0x60>)
 800243a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243e:	4a04      	ldr	r2, [pc, #16]	; (8002450 <scheduler+0x60>)
 8002440:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000398 	.word	0x20000398

08002454 <initializeTask>:
static void initializeTask(osTaskObject* handler, void* callback,OsTaskPriorityNumber priority)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	4613      	mov	r3, r2
 8002460:	71fb      	strb	r3, [r7, #7]
    handler->memoryStack[MAX_STACK_SIZE/4 - XPSR_REG_POSITION] = XPSR_VALUE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002468:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    handler->memoryStack[MAX_STACK_SIZE/4 - PC_REG_POSTION] = (uint32_t)callback;
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    handler->memoryStack[MAX_STACK_SIZE/4 - LR_PREV_VALUE_POSTION] = EXEC_RETURN_VALUE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f06f 0206 	mvn.w	r2, #6
 800247a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    handler->stackPointer = (uint32_t)(handler->memoryStack + MAX_STACK_SIZE/4 - SIZE_STACK_FRAME);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	33bc      	adds	r3, #188	; 0xbc
 8002482:	461a      	mov	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    handler->taskPriority = priority;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	79fa      	ldrb	r2, [r7, #7]
 800248e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    handler->entryPoint = callback;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    handler->taskId = osKernel.countTask;
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <initializeTask+0x60>)
 800249c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000398 	.word	0x20000398

080024b8 <configureInterrupts>:

static void configureInterrupts(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
    // disable interrupts STick Pendsv

    NVIC_DisableIRQ(SysTick_IRQn);
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024c0:	f7ff fe68 	bl	8002194 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(PendSV_IRQn);
 80024c4:	f06f 0001 	mvn.w	r0, #1
 80024c8:	f7ff fe64 	bl	8002194 <__NVIC_DisableIRQ>

    NVIC_SetPriority(PendSV_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
 80024cc:	210f      	movs	r1, #15
 80024ce:	f06f 0001 	mvn.w	r0, #1
 80024d2:	f7ff fe83 	bl	80021dc <__NVIC_SetPriority>

    SystemCoreClockUpdate();
 80024d6:	f7fe faf7 	bl	8000ac8 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / (1000U * SYSTICK_PERIOD_MS));
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <configureInterrupts+0x38>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a05      	ldr	r2, [pc, #20]	; (80024f4 <configureInterrupts+0x3c>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	099b      	lsrs	r3, r3, #6
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fea2 	bl	8002230 <SysTick_Config>
}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000000 	.word	0x20000000
 80024f4:	10624dd3 	.word	0x10624dd3

080024f8 <SysTick_Handler>:
/* ========== Processor Interruption and Exception Handlers ========= */

void SysTick_Handler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
    scheduler();
 80024fc:	f7ff ff78 	bl	80023f0 <scheduler>

    /*
     * Set up bit corresponding exception PendSV
     */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <SysTick_Handler+0x20>)
 8002502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002506:	605a      	str	r2, [r3, #4]
  __ASM volatile ("isb 0xF":::"memory");
 8002508:	f3bf 8f6f 	isb	sy
}
 800250c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800250e:	f3bf 8f4f 	dsb	sy
}
 8002512:	bf00      	nop
    /*
     * Data Synchronization Barrier; ensures that all memory accesses are
     * completed before next instruction is executed
     */
    __DSB();
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <PendSV_Handler>:
	 * el unico argumento pasado por RO, y el valor de retorno tambien se almacena en R0
	 *
	 * NOTA: El primer ingreso a este handler (luego del reset) implica que el push se hace sobre el
	 * stack inicial, ese stack se pierde porque no hay seguimiento del MSP en el primer ingreso
     */
    __ASM volatile ("push {r4-r11, lr}");
 800251c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    __ASM volatile ("mrs r0, msp");
 8002520:	f3ef 8008 	mrs	r0, MSP
    __ASM volatile ("bl %0" :: "i"(getNextContext));
 8002524:	f7ff ff2e 	bl	8002384 <getNextContext>
    __ASM volatile ("msr msp, r0");
 8002528:	f380 8808 	msr	MSP, r0
    __ASM volatile ("pop {r4-r11, lr}");    //Recuperados todos los valores de registros
 800252c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

     /* Se hace un branch indirecto con el valor de LR que es nuevamente EXEC_RETURN */
     __ASM volatile ("bx lr");
 8002530:	4770      	bx	lr
 }
 8002532:	bf00      	nop

08002534 <memset>:
 8002534:	4402      	add	r2, r0
 8002536:	4603      	mov	r3, r0
 8002538:	4293      	cmp	r3, r2
 800253a:	d100      	bne.n	800253e <memset+0xa>
 800253c:	4770      	bx	lr
 800253e:	f803 1b01 	strb.w	r1, [r3], #1
 8002542:	e7f9      	b.n	8002538 <memset+0x4>

08002544 <__libc_init_array>:
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	4d0d      	ldr	r5, [pc, #52]	; (800257c <__libc_init_array+0x38>)
 8002548:	4c0d      	ldr	r4, [pc, #52]	; (8002580 <__libc_init_array+0x3c>)
 800254a:	1b64      	subs	r4, r4, r5
 800254c:	10a4      	asrs	r4, r4, #2
 800254e:	2600      	movs	r6, #0
 8002550:	42a6      	cmp	r6, r4
 8002552:	d109      	bne.n	8002568 <__libc_init_array+0x24>
 8002554:	4d0b      	ldr	r5, [pc, #44]	; (8002584 <__libc_init_array+0x40>)
 8002556:	4c0c      	ldr	r4, [pc, #48]	; (8002588 <__libc_init_array+0x44>)
 8002558:	f000 f818 	bl	800258c <_init>
 800255c:	1b64      	subs	r4, r4, r5
 800255e:	10a4      	asrs	r4, r4, #2
 8002560:	2600      	movs	r6, #0
 8002562:	42a6      	cmp	r6, r4
 8002564:	d105      	bne.n	8002572 <__libc_init_array+0x2e>
 8002566:	bd70      	pop	{r4, r5, r6, pc}
 8002568:	f855 3b04 	ldr.w	r3, [r5], #4
 800256c:	4798      	blx	r3
 800256e:	3601      	adds	r6, #1
 8002570:	e7ee      	b.n	8002550 <__libc_init_array+0xc>
 8002572:	f855 3b04 	ldr.w	r3, [r5], #4
 8002576:	4798      	blx	r3
 8002578:	3601      	adds	r6, #1
 800257a:	e7f2      	b.n	8002562 <__libc_init_array+0x1e>
 800257c:	080025c4 	.word	0x080025c4
 8002580:	080025c4 	.word	0x080025c4
 8002584:	080025c4 	.word	0x080025c4
 8002588:	080025c8 	.word	0x080025c8

0800258c <_init>:
 800258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258e:	bf00      	nop
 8002590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002592:	bc08      	pop	{r3}
 8002594:	469e      	mov	lr, r3
 8002596:	4770      	bx	lr

08002598 <_fini>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	bf00      	nop
 800259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259e:	bc08      	pop	{r3}
 80025a0:	469e      	mov	lr, r3
 80025a2:	4770      	bx	lr
